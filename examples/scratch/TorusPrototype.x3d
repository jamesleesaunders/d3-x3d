  <X3D profile='Full' version='3.3' xmlns:xsd='http://www.w3.org/2001/XMLSchema-instance' xsd:noNamespaceSchemaLocation='http://www.web3d.org/specifications/x3d-3.3.xsd'>
		<Scene>
		<ProtoDeclare name='Torus'>
			<ProtoInterface>
				<field accessType='inputOutput' type='SFFloat' name='angle' value='6.28318530718'></field>
				<field accessType='inputOutput' type='SFFloat' name='innerRadius' value='0.5'></field>
				<field accessType='inputOutput' type='SFFloat' name='outerRadius' value='1.0'></field>
				<field accessType='inputOutput' type='SFVec2f' name='subdivision' value='24,24'></field>
				<field accessType='initializeOnly' type='SFBool' name='caps' value='true'></field>
				<field accessType='initializeOnly' type='SFBool' name='solid' value='true'></field>
			</ProtoInterface>
			<ProtoBody>
				<Extrusion DEF='Geometry' beginCap='true' endCap='true' solid='true' creaseAngle='1'>
					<IS>
						<connect nodeField='solid' protoField='solid'></connect>
						<connect nodeField='beginCap' protoField='caps'></connect>
						<connect nodeField='endCap' protoField='caps'></connect>
					</IS>
				</Extrusion>
				<Script type='model/x3d+xml'>
					<field accessType='inputOutput' type='SFFloat' name='angle'></field>
					<field accessType='inputOutput' type='SFFloat' name='innerRadius'></field>
					<field accessType='inputOutput' type='SFFloat' name='outerRadius'></field>
					<field accessType='inputOutput' type='SFVec2f' name='subdivision'></field>
					<field accessType='initializeOnly' type='SFNode' name='geometry'>
						<Extrusion USE='Geometry'></Extrusion>
					</field>
					<IS>
						<connect nodeField='angle' protoField='angle'></connect>
						<connect nodeField='innerRadius' protoField='innerRadius'></connect>
						<connect nodeField='outerRadius' protoField='outerRadius'></connect>
						<connect nodeField='subdivision' protoField='subdivision'></connect>
					</IS>
					<![CDATA[ecmascript:

						function initialize() {
							eventsProcessed();
						}

						function eventsProcessed() {
							let spine = new MFVec3f();
							let crossSection = new MFVec2f();

							// Cross-section
							let minorSubdivision = subdivision[0];
							for (let i = 0; i < minorSubdivision; ++i) {
								let x = Math.sin(2 * Math.PI * i / minorSubdivision);
								let y = Math.cos(2 * Math.PI * i / minorSubdivision);
								crossSection[i] = new SFVec2f(x, y).multiply(innerRadius);
							}
							crossSection[minorSubdivision] = crossSection[0];

							// Spine
							let a = Math.min(angle, 2 * Math.PI);
							let majorSubdivision = Math.ceil(subdivision[1] * (a / (2 * Math.PI)));
							for (let i = 0; i <= majorSubdivision; ++i) {
								let x = Math.cos(-a * i / majorSubdivision);
								let z = Math.sin(-a * i / majorSubdivision);
								spine[i] = new SFVec3f(x, z, 0).multiply(outerRadius);
							}

							// If it is a full circle wrap back to start
							if (a === 2 * Math.PI) {
								spine[majorSubdivision] = spine[0];
							} else {
								// Add two points before last and after first, to get closer to circle.
								let x2 = Math.cos(-a * 0.9999);
								let z2 = Math.sin(-a * 0.9999);
								spine.splice(majorSubdivision, 0, new SFVec3f(x2, z2, 0).multiply(outerRadius));
								let x1 = Math.cos(-a * 0.0001);
								let z1 = Math.sin(-a * 0.0001);
								spine.splice(1, 0, new SFVec3f(x1, z1, 0).multiply(outerRadius));
							}

							geometry.set_crossSection = crossSection;
							geometry.set_spine = spine;
						}
					]]>
				</Script>
			</ProtoBody>
		</ProtoDeclare>
		</Scene>
  </X3D>
